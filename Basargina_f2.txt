Как объявляется функция в PHP?  
Функция объявляется с помощью ключевого слова function, например:  
function myFunction($param) {
    // код функции...
}

Для чего используется оператор return в функции?  
return завершает выполнение функции и возвращает значение.

Что произойдёт, если не использовать return в функции, которая возвращает значение?  
Возвращаемое значение будет равно NULL.

Как передаются параметры в функцию по умолчанию?  
Параметры могут иметь значения по умолчанию, указанные при их объявлении.

Как комбинируются параметры с и без значений по умолчанию?  
Параметры без значений по умолчанию должны располагаться перед параметрами с.

Чем локальные переменные отличаются от глобальных?  
Локальные существуют только внутри функции, глобальные доступны всему скрипту.

Как объявляется статическая переменная?  
Статическая переменная объявляется с помощью ключевого слова static:  
function myFunction() {
    static $count = 0;
}

Чем статическая переменная отличается от обычной локальной?  
Статическая переменная сохраняет свое значение между вызовами функции.

Пример глобальной переменной внутри функции:  
$globalVar = 10;
function test() {
    global $globalVar;
    return $globalVar;
}


Как работает анонимная функция?  
Анонимные функции могут быть созданы без имени и присвоены переменной.

Что такое замыкание в PHP?  
Замыкание — это анонимная функция, захватывающая переменные из внешней области видимости.

Как замыкание захватывает переменные?  
Переменные можно захватывать через use:  
$adder = function($x) use ($y) { return $x + $y; };


Пример использования замыкания:  
$multiplier = function($x) use ($factor) { return $x * $factor; };


Что произойдёт, если передать переменную по ссылке?  
Изменения внутри функции затронут оригинальную переменную.

В каких случаях используется рекурсия?  
При решении задач, которые могут быть разбиты на более мелкие подзадачи.

Как работает условие выхода в рекурсивной функции?  
Условие выхода предотвращает бесконечные вызовы, задавая базовый случай.

Пример рекурсивной функции для вычисления факториала:  
function factorial($n) {
    if ($n <= 1) return 1;
    return $n * factorial($n - 1);
}

Рекурсивный поиск максимума в массиве:  
function findMax($arr) {
    if (count($arr) == 1) return $arr[0];
    return max($arr[0], findMax(array_slice($arr, 1)));
}


Типы параметров и возвращаемых значений в PHP:  
Обеспечивают валидацию типов.

Как объявить функцию с возвратом значения типа int?  
function returnInt(): int {
    return 42;
}


Пример функции с типом возвращаемого значения ?float:  
function getFloatOrNull(): ?float {
    return null;
}


Что делает функция calluserfunc?  
Вызывает функцию по имени с переданными аргументами.

Как получить массив всех аргументов функции?  
Используйте func_get_args().

Что делает функция funcnumargs?  
Возвращает количество переданных аргументов.

Что такое декоратор функций?  
Декоратор изменяет или расширяет функции через замыкание.

Роль статических переменных в оптимизации:  
Сохраняют состояние между вызовами, уменьшая затраты на повторные вычисления.

Пример оптимизации функции с использованием статической переменной:  
function counter() {
    static $count = 0;
    $count++;
    return $count;
}


Как избежать проблем с производительностью при рекурсии?  
Использовать аккумуляторы или оптимизировать алгоритм.

Преимущество анонимных функций для кратковременных задач:  
Легко создаются и не захламляют пространство имен.

Как функции принимают переменное количество аргументов?  
Используя ...$args:  
function example(...$args) {
    // обработка аргументов
}




1. Сумма всех положительных чисел в массиве:
function sumPositive($arr) {
    $sum = 0;
    foreach ($arr as $num) {
        if ($num > 0) {
            $sum += $num;
        }
    }
    return $sum;
}


2. Рекурсивная функция, находящая минимальный элемент в массиве:
function findMin($arr) {
    if (count($arr) === 1) return $arr[0];
    return min($arr[0], findMin(array_slice($arr, 1)));
}


3. Замыкание, делящее число на фактор:
function divisionClosure($factor) {
    return function($number) use ($factor) {
        return $number / $factor;
    };
}


4. Функция, возвращающая строку с максимальной длиной:
function longestString($arr) {
    return array_reduce($arr, function($a, $b) {
        return (strlen($a) > strlen($b)) ? $a : $b;
    });
}


5. Функция для хранения суммы всех вызовов:
$globalSum = 0;

function addToSum($num) {
    global $globalSum;
    $globalSum += $num;
    return $globalSum;
}


6. Анонимная функция, возводящая число в квадрат:
$square = function($num) {
    return $num ** 2;
};


7. Функция, возвращающая массив уникальных элементов:
function getUnique($arr) {
    return array_unique($arr);
}


8. Функция с параметром по умолчанию, выводящая имя пользователя:
function greetUser($name = "Гость") {
    $hour = date("H");
    if ($hour < 12) {
        return "Доброе утро, $name!";
    } elseif ($hour < 18) {
        return "Добрый день, $name!";
    } else {
        return "Добрый вечер, $name!";
    }
}


9. Рекурсивная функция нахождения суммы цифр числа:
function sumOfDigits($num) {
    if ($num < 10) return $num;
    return $num % 10 + sumOfDigits((int)($num / 10));
}


10. Функция, возвращающая количество четных чисел в массиве:
function countEven($arr) {
    return count(array_filter($arr, function($num) {
        return $num % 2 === 0;
    }));
}
